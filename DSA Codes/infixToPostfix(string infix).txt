string infixToPostfix(string infix) {
    // Declare a stack to hold operators and a string to hold the postfix expression
    stack<char> s;
    string postfix = "";

    // Loop through the input infix expression
    for (int i = 0; i < infix.length(); i++) {
        char c = infix[i];

        // If the character is a digit or letter, add it to the output
        if (isalnum(c)) {
            postfix += c;
        }
        // If the character is an opening parenthesis, push it onto the stack
        else if (c == '(') {
            s.push(c);
        }
        // If the character is a closing parenthesis, pop operators from the stack and add them to the output until an opening parenthesis is encountered
        else if (c == ')') {
            while (!s.empty() && s.top() != '(') {
                postfix += s.top();
                s.pop();
            }
            s.pop(); // Remove the opening parenthesis from the stack
        }
        // If the character is an operator, pop operators from the stack and add them to the output until an operator with lower or equal precedence is encountered
        else {
            while (!s.empty() && precedence(c) <= precedence(s.top())) {
                postfix += s.top();
                s.pop();
            }
            s.push(c); // Push the current operator onto the stack
        }
    }

    // Pop any remaining operators from the stack and add them to the output
    while (!s.empty()) {
        postfix += s.top();
        s.pop();
    }

    return postfix;
}

// Helper function to determine the precedence of an operator
int precedence(char operatorChar) {
    if (operatorChar == '+' || operatorChar == '-') {
        return 1;
    }
    else if (operatorChar == '*' || operatorChar == '/') {
        return 2;
    }
    else if (operatorChar == '^') {
        return 3;
    }
    else {
        return 0;
    }
}